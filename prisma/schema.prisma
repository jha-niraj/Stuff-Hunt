generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    SELLER
    ADMIN
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime?
    password             String?
    name                 String
    image                String    @default("https://res.cloudinary.com/dhfuckcax/image/upload/v1739810646/krk8x7fzjukcfcoefrea.jpg")
    role                 Role      @default(USER)
    roleExplicitlyChosen Boolean   @default(false)
    onboardingCompleted  Boolean   @default(false)
    createdAt            DateTime  @default(now())

    // Profile fields
    bio       String?
    location  String?
    website   String?
    interests String[] @default([])

    // Email verification
    verificationToken       String?   @unique
    verificationTokenExpiry DateTime?

    // Password reset
    resetToken       String?   @unique
    resetTokenExpiry DateTime?

    // Seller specific fields
    companyName       String?
    businessType      String?
    gstNumber         String?
    panNumber         String?
    businessAddress   String?
    phoneNumber       String?
    kycStatus         String  @default("PENDING") // PENDING, APPROVED, REJECTED
    verificationBadge Boolean @default(false)

    // Shipping addresses
    addresses Address[]

    accounts      Account[]
    products      Product[]      @relation("SellerProducts")
    orders        Order[]        @relation("BuyerOrders")
    reviews       Review[]
    cartItems     CartItem[]
    wishlistItems WishlistItem[]
    productLikes  ProductLike[]

    @@index([email])
    @@index([role])
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Product {
    id                  String   @id @default(cuid())
    name                String
    slug                String   @unique
    price               Float
    originalPrice       Float? // For showing discounts
    shortDescription    String?
    detailedDescription String?
    images              String[] // Array of Cloudinary URLs
    viewCount           Int      @default(0)
    isActive            Boolean  @default(true)
    inStock             Boolean  @default(true)
    stockQuantity       Int      @default(0)

    // Product variants
    colors   String[] @default([])
    sizes    String[] @default([])
    variants Json? // Store complex variant data

    // SEO and metadata
    metaTitle       String?
    metaDescription String?
    tags            String[] @default([])

    // Pricing and discounts
    discountPercentage Float?
    discountStartDate  DateTime?
    discountEndDate    DateTime?

    // Product specifications
    weight     Float?
    dimensions String? // e.g., "10x5x2 cm"
    material   String?
    brand      String?
    sku        String? @unique

    // AI-generated metadata for search optimization
    aiMetadata Json? // Stores AI-generated product analysis and search metadata

    // Engagement metrics
    likeCount  Int @default(0)
    shareCount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Seller relationship
    sellerId String
    seller   User   @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)

    // Many-to-many relationship with categories
    categories Category[] @relation("ProductCategories")

    // One-to-many relationships
    orderItems    OrderItem[]
    reviews       Review[]
    likes         ProductLike[]
    cartItems     CartItem[]
    wishlistItems WishlistItem[]

    @@index([sellerId])
    @@index([isActive])
    @@index([createdAt])
    @@index([slug])
    @@index([inStock])
}

model Category {
    id          String     @id @default(cuid())
    name        String     @unique
    description String?
    parentId    String?
    parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
    children    Category[] @relation("CategoryHierarchy")

    // Many-to-many relationship with products
    products Product[] @relation("ProductCategories")

    createdAt DateTime @default(now())

    @@index([parentId])
}

model Order {
    id             String      @id @default(cuid())
    orderNumber    String      @unique
    status         OrderStatus @default(PENDING)
    subtotal       Float
    shippingCost   Float       @default(0)
    taxAmount      Float       @default(0)
    discountAmount Float       @default(0)
    total          Float

    // Payment information
    paymentStatus PaymentStatus @default(PENDING)
    paymentMethod String?
    paymentId     String?

    // Shipping information
    shippingAddress   Json // Store shipping address as JSON
    billingAddress    Json? // Store billing address as JSON
    trackingNumber    String?
    estimatedDelivery DateTime?
    deliveredAt       DateTime?

    // Order notes and metadata
    notes    String?
    metadata Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Buyer relationship
    buyerId String
    buyer   User   @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)

    // Order items
    items OrderItem[]

    // Coupons used
    couponsUsed OrderCoupon[]

    @@index([buyerId])
    @@index([status])
    @@index([orderNumber])
    @@index([createdAt])
}

model Review {
    id        String   @id @default(cuid())
    rating    Int // 1-5 stars
    comment   String?
    createdAt DateTime @default(now())

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Product relationship
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([productId])
    @@index([rating])
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

// Cart items stored in database for logged-in users
model CartItem {
    id         String   @id @default(cuid())
    quantity   Int      @default(1)
    variantKey String? // e.g., "Black|L" for color and size
    metadata   Json? // Store additional variant data
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Product relationship
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId, variantKey])
    @@index([userId])
    @@index([productId])
}

// Order items - individual products in an order
model OrderItem {
    id         String  @id @default(cuid())
    quantity   Int
    unitPrice  Float // Price at time of order
    totalPrice Float // unitPrice * quantity
    variantKey String? // Product variant selected
    metadata   Json? // Store variant details at time of order

    createdAt DateTime @default(now())

    // Order relationship
    orderId String
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    // Product relationship
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([orderId])
    @@index([productId])
}

// Wishlist functionality
model WishlistItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Product relationship
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@index([userId])
    @@index([productId])
}

// Product likes/favorites
model ProductLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Product relationship
    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@index([userId])
    @@index([productId])
}

// User addresses for shipping
model Address {
    id         String  @id @default(cuid())
    type       String  @default("SHIPPING") // SHIPPING, BILLING
    firstName  String
    lastName   String
    company    String?
    address1   String
    address2   String?
    city       String
    state      String
    postalCode String
    country    String  @default("US")
    phone      String?
    isDefault  Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // User relationship
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([isDefault])
}

// Discount coupons
model Coupon {
    id              String    @id @default(cuid())
    code            String    @unique
    name            String
    description     String?
    type            String // PERCENTAGE, FIXED_AMOUNT, FREE_SHIPPING
    value           Float // Percentage (0-100) or fixed amount
    minimumAmount   Float? // Minimum order amount to use coupon
    maximumDiscount Float? // Maximum discount amount for percentage coupons
    usageLimit      Int? // Total usage limit
    usageCount      Int       @default(0)
    userLimit       Int? // Per-user usage limit
    isActive        Boolean   @default(true)
    startsAt        DateTime?
    expiresAt       DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Track coupon usage
    orderCoupons OrderCoupon[]

    @@index([code])
    @@index([isActive])
    @@index([expiresAt])
}

// Track coupon usage in orders
model OrderCoupon {
    id             String @id @default(cuid())
    discountAmount Float

    // Order relationship
    orderId String
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    // Coupon relationship
    couponId String
    coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

    @@index([orderId])
    @@index([couponId])
}

// Contact form submissions for bulk orders
model ContactSubmission {
    id String @id @default(cuid())

    // Contact Information
    firstName String
    lastName  String
    email     String
    phone     String?
    company   String
    jobTitle  String?
    website   String?

    // Business Information
    businessType String // e.g., "Retail", "Corporate", "Non-profit", "Educational"
    industryType String? // e.g., "Technology", "Healthcare", "Education"
    companySize  String // e.g., "1-10", "11-50", "51-200", "200+"

    // Order Information
    productTypes      String[] @default([]) // Types of products interested in
    estimatedQuantity String // e.g., "100-500", "500-1000", "1000+"
    estimatedBudget   String? // e.g., "$1,000-$5,000", "$5,000-$10,000"
    timeline          String? // e.g., "ASAP", "1-2 weeks", "1 month", "3+ months"

    // Project Details
    projectDescription  String
    customizationNeeds  String? // Branding, logos, custom designs
    specialRequirements String? // Packaging, shipping, etc.

    // Additional Information
    hearAboutUs        String? // How they heard about us
    previousExperience Boolean @default(false) // Have they ordered bulk before

    // Status and Follow-up
    status       ContactStatus   @default(NEW)
    priority     ContactPriority @default(MEDIUM)
    assignedTo   String? // Staff member assigned
    notes        String? // Internal notes
    followUpDate DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status])
    @@index([priority])
    @@index([createdAt])
    @@index([email])
}

enum ContactStatus {
    NEW
    CONTACTED
    IN_PROGRESS
    QUOTED
    CONVERTED
    CLOSED
    SPAM
}

enum ContactPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}
